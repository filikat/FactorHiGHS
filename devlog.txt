*****
26 Feb 24
I start implementing the analyze phase.
Most of the analyze phase can be taken from Tim Davis' book.
---
I need to choose which format of the matrix to accept as input, full or upper triangular.
I decide to accept both. 
If input is full, I extract the upper part.
If input is upper, nothing else is needed.
---
Function to permute the matrix symmetrically into upper triangular form is taken straight from Tim Davis.
I use this function also to extract the upper part from the full matrix, simply by using the identical permutation.
---
Function to get a permutation from Metis needs the full matrix, because Metis does not take triangular matrices for symmetric graphs.
If the original input was upper, I need to create a temporary copy of the full matrix. This is similar to Permute.
If the original input is full, I can save a pointer to it to use for Metis. Only that Metis takes non-const pointers.
I need to make a local copy of the full matrix to pass to Metis. Annoying, but not a big deal.
---
Function for the elimination tree is straightforward. 
The tree is saved in the vector parent, where if the parent is -1, then the node is the root.
The function in Tim Davis book works only for upper triangular matrices. I initially go with lower triangular, but I have to change the format to avoid over complicating things.
---
I need to implement the postorder, which should also be straightforward. 
But I am not sure if I should permute the matrix again. Maybe I can avoid it somehow.
In the future, the analyze phase should include also the ordering to reduce stack size for frontal matrices. For now, I ignore this.
---
I have two matlab functions to check that everything works on some small example. 
They convert between Matlab matrices and CSC matrices. 
After some debugging, everything runs smoothly.
---

*****
27 Feb 24
I implemented the post ordering. 
Pretty straightforward, taken directly from Tim Davis.
At the moment, after computing the postorder, the elimination tree is relabeled and the matrix is permuted.
Also the vectors perm and iperm are updated, to keep track of the overall permutation applied to the original matrix.
I added some auxiliary functions to manage the permutations and moved them into a file of auxiliary functions.
---
I had some issued when trying with larger problems. I spotted some issues with the Matlab functions that I was using to generate the CSC matrix.
I fixed it and now it works for other problems as well.
I made the Matlab functions a bit more automatic, so that everything runs more easily and faster.
---
I am still not sure of what's the best input form.
As Julian pointed out, taking a full matrix is dangerous, so I may go back to taking only upper triangular.
Generating a local copy of the full matrix is not a big deal.
---
I still have to implement, for the analyze:
- column counts
- full symbolic factorization
- find (fundamental) supernodes
- build assembly tree
- build relative indices for frontal matrices
---

*****
28 Feb 24
I spent a lot of time trying to use the algorithms in Tim Davis book for row and column counts. They don't work for some reason.
I will go back to that later. For now I am using the slightly inefficient approach.
It uses O(|L|) operations instead of O(|A|). Not a big deal, but it could be improved. 
For now everything works. I implemented the row and column counts and the full symbolic factorization.
Still missing supernode stuff.
I also need to decide how and what to store at the end. I may need a struct SymbolicFact to store the permutation, elimination tree and sparsity structure of L.
I am still trying to understand if I can avoid a second permutation with the postorder of the matrix. 
It should be possible, but I need to figure out some details. Not a big deal anyway. 
---
Some matrices, like pilot (but also others when using augmented system) give issues. 
There is a segfault during the call to Metis that I cannot understand.
I need to try and build the matrix directly in cpp and see if it persists. Maybe I am doing something wrong with the way I create the matrix in Matlab.
---