*****
26 Feb 24
I start implementing the analyze phase.
Most of the analyze phase can be taken from Tim Davis' book.
---
I need to choose which format of the matrix to accept as input, full or upper triangular.
I decide to accept both. 
If input is full, I extract the upper part.
If input is upper, nothing else is needed.
---
Function to permute the matrix symmetrically into upper triangular form is taken straight from Tim Davis.
I use this function also to extract the upper part from the full matrix, simply by using the identical permutation.
---
Function to get a permutation from Metis needs the full matrix, because Metis does not take triangular matrices for symmetric graphs.
If the original input was upper, I need to create a temporary copy of the full matrix. This is similar to Permute.
If the original input is full, I can save a pointer to it to use for Metis. Only that Metis takes non-const pointers.
I need to make a local copy of the full matrix to pass to Metis. Annoying, but not a big deal.
---
Function for the elimination tree is straightforward. 
The tree is saved in the vector parent, where if the parent is -1, then the node is the root.
The function in Tim Davis book works only for upper triangular matrices. I initially go with lower triangular, but I have to change the format to avoid over complicating things.
---
I need to implement the postorder, which should also be straightforward. 
But I am not sure if I should permute the matrix again. Maybe I can avoid it somehow.
In the future, the analyze phase should include also the ordering to reduce stack size for frontal matrices. For now, I ignore this.
---
I have two matlab functions to check that everything works on some small example. 
They convert between Matlab matrices and CSC matrices. 
After some debugging, everything runs smoothly.
---

*****
27 Feb 24
I implemented the post ordering. 
Pretty straightforward, taken directly from Tim Davis.
At the moment, after computing the postorder, the elimination tree is relabeled and the matrix is permuted.
Also the vectors perm and iperm are updated, to keep track of the overall permutation applied to the original matrix.
I added some auxiliary functions to manage the permutations and moved them into a file of auxiliary functions.
---
I had some issued when trying with larger problems. I spotted some issues with the Matlab functions that I was using to generate the CSC matrix.
I fixed it and now it works for other problems as well.
I made the Matlab functions a bit more automatic, so that everything runs more easily and faster.
---
I am still not sure of what's the best input form.
As Julian pointed out, taking a full matrix is dangerous, so I may go back to taking only upper triangular.
Generating a local copy of the full matrix is not a big deal.
---

*****
28 Feb 24
I spent a lot of time trying to use the algorithms in Tim Davis book for row and column counts. They don't work for some reason.
I will go back to that later. For now I am using the slightly inefficient approach.
It uses O(|L|) operations instead of O(|A|). Not a big deal, but it could be improved. 
For now everything works. I implemented the row and column counts and the full symbolic factorization.
Still missing supernode stuff.
I also need to decide how and what to store at the end. I may need a struct SymbolicFact to store the permutation, elimination tree and sparsity structure of L.
I am still trying to understand if I can avoid a second permutation with the postorder of the matrix. 
It should be possible, but I need to figure out some details. Not a big deal anyway. 
---
Some matrices, like pilot (but also others when using augmented system) give issues. 
There is a segfault during the call to Metis that I cannot understand.
I need to try and build the matrix directly in cpp and see if it persists. Maybe I am doing something wrong with the way I create the matrix in Matlab.
---

*****
29 Feb 24
I implemented the fundamental supernodes. The algorithm to find them comes directly from Scott&Tuma book. 
For some matrices the supernodes are quite small, especially when using augmented system. It may be needed to merge them. For now I leave as it is.
Supernode information is stored as starting node of each supernode (fsn_ptr) and supernodal elimination tree.
An intermediate vector of length n is needed to find the tree efficiently.
---
I created a separate object Symbolic to store the information of the analyze phase. 
The idea is that an Analyze object creates a Symbollic object, and this is never modified again.
I need to adjust a couple of things because at the moment it is a bit of a mess.
No need to std::move everything if S is passed at the beginning and things are stored there directly.
Everything that is not needed after the analyze phase is discarded.
Symbolic is then accessed only by const public functions.
---
I implemented the relative indices for the frontal matrices, and also the extraction of the information of the clique tree.
There is an issue if the supernodes are merged, because the information about which rows are nonzeros in the frontal matrix cannot be read directly from L anymore.
The columns of the supernodes that were merged have to be merged as well and stored separately. 
I will think about this if and when we decide to merge supernodes.
---

*****
1 Mar 2024
Removed option to input full matrix.
Now, any matrix is given, it uses permute to extract the upper triangular part.
I decided to keep Analyze and Symbolic as they are, with std::move, instead of passing S at the beginning.
---
I changed test.cpp to directly read the mps file of the problem and build either the augmented system or the normal equations.
It can also presolve the problem. 
The Matlab test file now reads everything as input from file, instead of building the matrix separately.
---
For some problems (e.g.,pilot and woodw), Metis gives some weird errors, but only sometimes. The errors are not even always the same.
It gives segfault, bus error, trace trap. Backtracing in LLDB shows that this happens during the call to Metis.
The problem becomes less frequent reading the matrix directly from mps file and presolving (for pilot at least), but it persists for woodw.
No idea what is happening.
---
Also, the reordering using Metis is slightly worse than the reordering using dissect in Matlab.
It should use Metis underneath, but I cannot reproduce the same results by changing the options.
Maybe this only happens for small matrices, because amd is used at some point?
---
I improved the comments in Symbolic.h, so that everything is explained properly. 
I added a small example to show what the vectors contain.
---



*****
To do:
-try to avoid permuting the matrix, by using upper and lower triangular part
-figure out why the skeleton matrix does not work
